// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: products.sql

package db

import (
	"context"
	"database/sql"
)

const addProduct = `-- name: AddProduct :execresult
INSERT INTO user_item (
    user_id, count, name, price, about, picture
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type AddProductParams struct {
	UserID  sql.NullInt64   `json:"user_id"`
	Count   sql.NullInt64   `json:"count"`
	Name    sql.NullString  `json:"name"`
	Price   sql.NullFloat64 `json:"price"`
	About   sql.NullString  `json:"about"`
	Picture sql.NullString  `json:"picture"`
}

func (q *Queries) AddProduct(ctx context.Context, arg AddProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addProduct,
		arg.UserID,
		arg.Count,
		arg.Name,
		arg.Price,
		arg.About,
		arg.Picture,
	)
}

const deleteProduct = `-- name: DeleteProduct :execresult
DELETE FROM user_item WHERE id = ? AND user_id = ?
`

type DeleteProductParams struct {
	ID     int64         `json:"id"`
	UserID sql.NullInt64 `json:"user_id"`
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteProduct, arg.ID, arg.UserID)
}

const getAllUserProducts = `-- name: GetAllUserProducts :many
SELECT id, user_id, count, name, price, about, picture FROM user_item
WHERE user_id = ?
`

func (q *Queries) GetAllUserProducts(ctx context.Context, userID sql.NullInt64) ([]UserItem, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserProducts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserItem
	for rows.Next() {
		var i UserItem
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Count,
			&i.Name,
			&i.Price,
			&i.About,
			&i.Picture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :execresult
UPDATE user_item SET count = ? WHERE user_id = ? AND id = ?
`

type UpdateProductParams struct {
	Count  sql.NullInt64 `json:"count"`
	UserID sql.NullInt64 `json:"user_id"`
	ID     int64         `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateProduct, arg.Count, arg.UserID, arg.ID)
}
